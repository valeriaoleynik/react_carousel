{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","currentImage","setCurrentImage","maxImages","length","widthOfCarousel","className","style","width","transition","map","image","index","transform","src","alt","height","type","onClick","prev","Math","max","disabled","min","App","setItemWidth","setFrameSize","setStep","setAnimationDuration","setInfinite","value","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08fc6512.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth:number;\n  animationDuration:number;\n  infinite:boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [currentImage, setCurrentImage] = useState(0);\n  const maxImages = images.length - frameSize;\n  const widthOfCarousel = itemWidth * frameSize;\n\n  const handleNextImage = () => {\n    if (currentImage !== maxImages) {\n      setCurrentImage((prev) => Math.min(prev + step, maxImages));\n    } else {\n      setCurrentImage(0);\n    }\n  };\n\n  const handlePrevImage = () => {\n    if (currentImage !== 0) {\n      setCurrentImage((prev) => Math.max(prev - step, 0));\n    } else {\n      setCurrentImage(maxImages);\n    }\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${widthOfCarousel}px`,\n        transition: `${animationDuration}ms`,\n      }}\n    >\n      <ul\n        className=\"Carousel__list\"\n      >\n        {images.map((image, index) => (\n          <li\n            key={image}\n            style={{\n              transform: `translateX(${-currentImage * itemWidth}px)`,\n            }}\n          >\n            <img\n              src={image}\n              alt={`${index + 1}`}\n              style={{\n                width: `${itemWidth}px`,\n                height: `${itemWidth}px`,\n              }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handlePrevImage}\n          disabled={currentImage === 0 && !infinite}\n        >\n          Prev\n        </button>\n\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className=\"button\"\n          onClick={handleNextImage}\n          disabled={currentImage === maxImages && !infinite}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App: React.FC = () => {\n  const [itemWidth, setItemWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n      <div className=\"App__settings Settings\">\n        <div className=\"Settings__elements\">\n          <label className=\"Settings__element-label\">\n            Item Width:\n            <input\n              className=\"Settings__element-input\"\n              type=\"number\"\n              min=\"130\"\n              max=\"260\"\n              step=\"10\"\n              value={itemWidth}\n              onChange={(e) => {\n                setItemWidth(+e.target.value);\n              }}\n            />\n          </label>\n\n          <label className=\"Settings__element-label\">\n            Frame Size:\n            <input\n              className=\"Settings__element-input\"\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              value={frameSize}\n              onChange={(e) => {\n                setFrameSize(+e.target.value);\n              }}\n            />\n          </label>\n\n          <label className=\"Settings__element-label\">\n            Step:\n            <input\n              className=\"Settings__element-input\"\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              value={step}\n              onChange={(e) => {\n                setStep(+e.target.value);\n              }}\n            />\n          </label>\n\n          <label className=\"Settings__element-label\">\n            Animation Duration:\n            <input\n              className=\"Settings__element-input\"\n              type=\"number\"\n              min=\"0\"\n              max=\"5000\"\n              step=\"500\"\n              value={animationDuration}\n              onChange={(e) => {\n                setAnimationDuration(+e.target.value);\n              }}\n            />\n          </label>\n\n          <label className=\"Settings__element-label\">\n            Infinite:\n            <input\n              className=\"Settings__element-input\"\n              type=\"checkbox\"\n              onChange={() => setInfinite(!infinite)}\n            />\n          </label>\n        </div>\n      </div>\n\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}